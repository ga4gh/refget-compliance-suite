[{"server": " http://127.0.0.1:8989/", "date_time": "2022-11-21 12:31:42.999799", "test_results": [{"name": "test_info_implement", "result": 1, "test_description": "Test to check if info-endpoint returns 200 OK with appropriate headers", "text": "Info endpoint implemented by the server", "parents": ["test_base_algorithm"], "children": ["test_info_implement_default", "test_info_circular", "test_info_algorithms", "test_info_identifiers", "test_info_subsequence", "test_info_api_version"], "warning": false, "edge_cases": []}, {"name": "test_info_implement_default", "result": 1, "test_description": "Test to check if info-endpoint returns 200 OK without headers", "text": "Info endpoint implemented with default encoding", "parents": ["test_info_implement"], "children": [], "warning": false, "edge_cases": []}, {"name": "test_info_circular", "result": 1, "test_description": "Test to check if info-endpoint has circular in the response object. And if it is there it updates session_params['circular'] as per the value", "text": "circular key in info response object", "parents": ["test_info_implement"], "children": ["test_metadata_query_circular_sequence", "test_sequence_circular", "test_sequence_circular_support_false_errors", "test_sequence_circular_support_true_errors"], "warning": false, "edge_cases": []}, {"name": "test_metadata_query_circular_sequence", "result": 1, "test_description": "Test if metadata endpoint returns 200 using circular test sequence if the server supports circular sequences. Value stored in session_params. If not skip test and set skip text appropriately", "text": "Circular sequence metadata can be retrieved", "parents": ["test_metadata_implement", "test_info_circular"], "children": [], "warning": false, "edge_cases": []}, {"name": "test_sequence_circular", "result": 1, "test_description": "Test to check if server passes all the edge cases related to circular queries", "text": "Circular sequence can be retrieved successfully passing all the edge cases", "parents": ["test_sequence_implement", "test_info_circular"], "children": [], "warning": false, "edge_cases": [{"api": "sequence/3332ed720ac7eaa9b3655c06f6b9e196?start=5374&end=5:{'Accept': 'text/vnd.ga4gh.refget.v1.0.0+plain'}", "result": 1}, {"api": "sequence/3332ed720ac7eaa9b3655c06f6b9e196?start=5374&end=0:{'Accept': 'text/vnd.ga4gh.refget.v1.0.0+plain'}", "result": 1}, {"api": "sequence/3332ed720ac7eaa9b3655c06f6b9e196?start=5380&end=25:{'Accept': 'text/vnd.ga4gh.refget.v1.0.0+plain'}", "result": 1}]}, {"name": "test_sequence_circular_support_false_errors", "result": 0, "test_description": "Test to check if server throws correct error codes on circular sequence query if server does not support circular sequences", "text": "test_sequence_circular_support_false_errors is skipped because server supports circular sequences", "parents": ["test_sequence_implement", "test_info_circular"], "children": [], "warning": false, "edge_cases": []}, {"name": "test_sequence_circular_support_true_errors", "result": 1, "test_description": "Test to check if server throws correct error codes on circular sequence query if server supports circular sequences", "text": "Server is correctly throwing for error cases of circular sequences when server supports circular sequences", "parents": ["test_sequence_implement", "test_info_circular"], "children": [], "warning": false, "edge_cases": [{"api": "sequence/6681ac2f62509cfc220d78751b8dc524:?start=220218&end=671", "result": 1}]}, {"name": "test_info_algorithms", "result": 1, "test_description": "Test to check if info-endpoint has algorithms in the response object. And if it is there it updates session_params['algorithms:trunc512'] and session_params['algorithms:ga4gh'] as per the value", "text": "algorithms key in info response object", "parents": ["test_info_implement"], "children": ["test_metadata_query_by_trunc512", "test_metadata_trunc512", "test_sequence_query_by_trunc512", "test_sequence_query_by_ga4gh"], "warning": false, "edge_cases": []}, {"name": "test_metadata_query_by_trunc512", "result": 1, "test_description": "Test if metadata endpoint returns 200 using trunc512 with I test sequence if the server supports. Value stored in session_params. If not skip test and set skip text appropriately", "text": "TRUNC512 algorithm is working in the server for metadata endpoint", "parents": ["test_metadata_implement", "test_info_algorithms"], "children": [], "warning": false, "edge_cases": []}, {"name": "test_metadata_trunc512", "result": -1, "test_description": "Test if trunc512 in metadata response object. Skip if server does not support trunc512", "text": "trunc512 key not in metadata response object even though info endpoint indicates it\"s support instead sends ", "parents": ["test_metadata_implement", "test_info_algorithms"], "children": [], "warning": true, "edge_cases": []}, {"name": "test_sequence_query_by_trunc512", "result": 1, "test_description": "Test to check if server returns 200 using I test sequence trunc512 and appropriate headers if the server supports trunc512", "text": "TRUNC512 algorithm is working in the server for sequence endpoint", "parents": ["test_sequence_implement", "test_info_algorithms"], "children": [], "warning": false, "edge_cases": []}, {"name": "test_sequence_query_by_ga4gh", "result": 0, "test_description": "Test to check if server returns 200 using I test sequence ga4gh and appropriate headers if the server supports ga4gh", "text": "test_sequence_query_by_ga4gh is skipped because server does not support GA4GH algorithm", "parents": ["test_sequence_implement", "test_info_algorithms"], "children": [], "warning": false, "edge_cases": []}, {"name": "test_info_identifiers", "result": 0, "test_description": "Test to check if info-endpoint has identifier_types in the response object. And if it is there it updates session_params['identifier_types:insdc'] as per the value", "text": "test_info_identifiers is skipped because server is running version 1 of Refget", "parents": ["test_info_implement"], "children": ["test_sequence_query_by_insdc"], "warning": false, "edge_cases": []}, {"name": "test_sequence_query_by_insdc", "result": 0, "test_description": "Test to check if server returns 200 using a test insdc identifier and appropriate headers if the server supports ga4gh", "text": "test_sequence_query_by_insdc is skipped because test_info_identifiers is skipped because server is running version 1 of Refget", "parents": ["test_sequence_implement", "test_info_identifiers"], "children": [], "warning": true, "edge_cases": []}, {"name": "test_info_subsequence", "result": 1, "test_description": "Test to check if info-endpoint has subsequence_limit in the response object. If the key is present we update session_params['subsequence_limit'] as per the value", "text": "subsequence_limit key in info response object", "parents": ["test_info_implement"], "children": [], "warning": false, "edge_cases": []}, {"name": "test_info_api_version", "result": 1, "test_description": "Test to check if info-endpoint has supported_api_versions in the response object.", "text": "supported_api_versions key in info response object", "parents": ["test_info_implement"], "children": [], "warning": false, "edge_cases": []}, {"name": "test_metadata_implement", "result": 1, "test_description": "Test if metadata endpoint returns 200 with appropriate headers using I test sequence", "text": "Metadata endpoint implemented by the server", "parents": ["test_base_algorithm"], "children": ["test_metadata_implement_default", "test_metadata_query_by_trunc512", "test_metadata_query_circular_sequence", "test_metadata_md5", "test_metadata_trunc512", "test_metadata_length", "test_metadata_aliases", "test_metadata_invalid_checksum_404_error", "test_metadata_invalid_encoding_406_error"], "warning": false, "edge_cases": []}, {"name": "test_metadata_implement_default", "result": 1, "test_description": "Test if metadata endpoint returns 200 without headers using I test sequence", "text": "Metadata endpoint implemented with default encoding", "parents": ["test_metadata_implement"], "children": [], "warning": false, "edge_cases": []}, {"name": "test_metadata_md5", "result": 1, "test_description": "Test if md5 in metadata response object", "text": "md5 key in metadata response object", "parents": ["test_metadata_implement"], "children": [], "warning": false, "edge_cases": []}, {"name": "test_metadata_length", "result": 1, "test_description": "Test if length in metadata response object", "text": "length key in metadata response object", "parents": ["test_metadata_implement"], "children": [], "warning": false, "edge_cases": []}, {"name": "test_metadata_aliases", "result": 1, "test_description": "Test if aliases in metadata response object", "text": "aliases key in metadata response object", "parents": ["test_metadata_implement"], "children": [], "warning": false, "edge_cases": []}, {"name": "test_metadata_invalid_checksum_404_error", "result": 1, "test_description": "Test if 404 on invalid checksum in metadata response", "text": "Server is correctly sending 404 on invalid checksum", "parents": ["test_metadata_implement"], "children": [], "warning": false, "edge_cases": []}, {"name": "test_metadata_invalid_encoding_406_error", "result": 1, "test_description": "Test if 406 on invalid encoding in Accept header", "text": "Server is correctly sending 406 on invalid encoding", "parents": ["test_metadata_implement"], "children": [], "warning": false, "edge_cases": []}, {"name": "test_sequence_implement", "result": 1, "test_description": "Test to check if server returns 200 using I test sequence and appropriate headers", "text": "Sequence endpoint implemented in the server", "parents": ["test_base_algorithm"], "children": ["test_sequence_implement_default", "test_sequence_start_end", "test_sequence_range", "test_sequence_query_by_trunc512", "test_sequence_query_by_ga4gh", "test_sequence_query_by_insdc", "test_sequence_invalid_checksum_404_error", "test_sequence_invalid_encoding_406_error", "test_sequence_circular", "test_sequence_circular_support_false_errors", "test_sequence_circular_support_true_errors"], "warning": false, "edge_cases": []}, {"name": "test_sequence_implement_default", "result": 1, "test_description": "Test to check if server returns 200 using I test sequence and no headers", "text": "Sequence endpoint implemented with default encoding", "parents": ["test_sequence_implement"], "children": [], "warning": false, "edge_cases": []}, {"name": "test_sequence_start_end", "result": 1, "test_description": "Test to check if server returns 200 and appropriate text using I test sequence and start/end query params set to 10 and 20 respectively", "text": "Server supports start end query params", "parents": ["test_sequence_implement"], "children": ["test_sequence_start_end_success_cases", "test_sequence_start_end_errors"], "warning": false, "edge_cases": []}, {"name": "test_sequence_start_end_success_cases", "result": 1, "test_description": "Test to check if server passes all the edge cases related to success queries using start/end params", "text": "Server passed all the success edge cases with start end query params", "parents": ["test_sequence_start_end"], "children": [], "warning": false, "edge_cases": [{"api": "sequence/6681ac2f62509cfc220d78751b8dc524:?start=10&end=10:{'Accept': 'text/vnd.ga4gh.refget.v1.0.0+plain'}", "result": 1}, {"api": "sequence/6681ac2f62509cfc220d78751b8dc524:?start=10&end=20:{'Accept': 'text/vnd.ga4gh.refget.v1.0.0+plain'}", "result": 1}, {"api": "sequence/6681ac2f62509cfc220d78751b8dc524:?start=10&end=11:{'Accept': 'text/vnd.ga4gh.refget.v1.0.0+plain'}", "result": 1}, {"api": "sequence/6681ac2f62509cfc220d78751b8dc524:?start=230208:{'Accept': 'text/vnd.ga4gh.refget.v1.0.0+plain'}", "result": 1}, {"api": "sequence/6681ac2f62509cfc220d78751b8dc524:?end=5:{'Accept': 'text/vnd.ga4gh.refget.v1.0.0+plain'}", "result": 1}, {"api": "sequence/6681ac2f62509cfc220d78751b8dc524:?start=230217&end=230218:{'Accept': 'text/vnd.ga4gh.refget.v1.0.0+plain'}", "result": 1}, {"api": "sequence/6681ac2f62509cfc220d78751b8dc524:?start=0:{'Accept': 'text/vnd.ga4gh.refget.v1.0.0+plain'}", "result": 1}, {"api": "sequence/6681ac2f62509cfc220d78751b8dc524:?&end=230218:{'Accept': 'text/vnd.ga4gh.refget.v1.0.0+plain'}", "result": 1}, {"api": "sequence/6681ac2f62509cfc220d78751b8dc524:?start=0&end=230218:{'Accept': 'text/vnd.ga4gh.refget.v1.0.0+plain'}", "result": 1}, {"api": "sequence/6681ac2f62509cfc220d78751b8dc524:?start=1&end=230218:{'Accept': 'text/vnd.ga4gh.refget.v1.0.0+plain'}", "result": 1}, {"api": "sequence/6681ac2f62509cfc220d78751b8dc524:?start=230217:{'Accept': 'text/vnd.ga4gh.refget.v1.0.0+plain'}", "result": 1}, {"api": "sequence/6681ac2f62509cfc220d78751b8dc524:?end=0:{'Accept': 'text/vnd.ga4gh.refget.v1.0.0+plain'}", "result": 1}]}, {"name": "test_sequence_start_end_errors", "result": 1, "test_description": "Test to check if server passes all the edge cases related start-end error cases", "text": "Server is correctly throwing errors for start-end error cases", "parents": ["test_sequence_start_end"], "children": [], "warning": false, "edge_cases": [{"api": "sequence/6681ac2f62509cfc220d78751b8dc524:?start=abc&end=20", "result": 1}, {"api": "sequence/6681ac2f62509cfc220d78751b8dc524:?start=-10&end=-29", "result": 1}, {"api": "sequence/6681ac2f62509cfc220d78751b8dc524:?start=abc", "result": 1}, {"api": "sequence/3332ed720ac7eaa9b3655c06f6b9e196:?start=67&end=5387", "result": 1}, {"api": "sequence/3332ed720ac7eaa9b3655c06f6b9e196:?start=5386&end=5375", "result": 1}, {"api": "sequence/3332ed720ac7eaa9b3655c06f6b9e196:?start=5386&end=5386", "result": 1}, {"api": "sequence/3332ed720ac7eaa9b3655c06f6b9e196:?start=5386&end=5", "result": 1}]}, {"name": "test_sequence_range", "result": 1, "test_description": "Test to check if server returns 200 and appropriate text using I test sequence and range header set to 10 and 19 respectively", "text": "Server supports range header", "parents": ["test_sequence_implement"], "children": ["test_sequence_range_success_cases", "test_sequence_range_errors"], "warning": false, "edge_cases": []}, {"name": "test_sequence_range_success_cases", "result": 1, "test_description": "Test to check if server passes all the edge cases related to range header success queries", "text": "Server passed all the success edge cases with range header query", "parents": ["test_sequence_range"], "children": [], "warning": false, "edge_cases": [{"api": "sequence/6681ac2f62509cfc220d78751b8dc524:bytes=10-19:{'Accept': 'text/vnd.ga4gh.refget.v1.0.0+plain'}", "result": 1}, {"api": "sequence/6681ac2f62509cfc220d78751b8dc524:bytes=10-230217:{'Accept': 'text/vnd.ga4gh.refget.v1.0.0+plain'}", "result": 1}, {"api": "sequence/6681ac2f62509cfc220d78751b8dc524:bytes=10-999999:{'Accept': 'text/vnd.ga4gh.refget.v1.0.0+plain'}", "result": 1}, {"api": "sequence/6681ac2f62509cfc220d78751b8dc524:bytes=0-230217:{'Accept': 'text/vnd.ga4gh.refget.v1.0.0+plain'}", "result": 1}, {"api": "sequence/6681ac2f62509cfc220d78751b8dc524:bytes=0-999999:{'Accept': 'text/vnd.ga4gh.refget.v1.0.0+plain'}", "result": 1}, {"api": "sequence/6681ac2f62509cfc220d78751b8dc524:bytes=0-0:{'Accept': 'text/vnd.ga4gh.refget.v1.0.0+plain'}", "result": 1}, {"api": "sequence/6681ac2f62509cfc220d78751b8dc524:bytes=230217-230217:{'Accept': 'text/vnd.ga4gh.refget.v1.0.0+plain'}", "result": 1}]}, {"name": "test_sequence_range_errors", "result": 1, "test_description": "Test to check if server passes all the edge cases related range error cases", "text": "Server is correctly throwing errors for range error cases", "parents": ["test_sequence_range"], "children": [], "warning": false, "edge_cases": [{"api": "6681ac2f62509cfc220d78751b8dc524:units=20-30", "result": 1}, {"api": "6681ac2f62509cfc220d78751b8dc524:bytes=ab-19", "result": 1}, {"api": "6681ac2f62509cfc220d78751b8dc524:bytes=-10--19", "result": 1}, {"api": "6681ac2f62509cfc220d78751b8dc524:bytes=10--19", "result": 1}, {"api": "6681ac2f62509cfc220d78751b8dc524:bytes=-10-", "result": 1}, {"api": "6681ac2f62509cfc220d78751b8dc524:bytes==10-19", "result": 1}, {"api": "3332ed720ac7eaa9b3655c06f6b9e196:bytes=5200-19", "result": 1}, {"api": "3332ed720ac7eaa9b3655c06f6b9e196:bytes=59-50", "result": 1}, {"api": "3332ed720ac7eaa9b3655c06f6b9e196:bytes=5385-5382", "result": 1}, {"api": "3332ed720ac7eaa9b3655c06f6b9e196:bytes=5387-5391", "result": 1}, {"api": "3332ed720ac7eaa9b3655c06f6b9e196:bytes=5386-5387", "result": 1}, {"api": "3332ed720ac7eaa9b3655c06f6b9e196:bytes=9999-99999", "result": 1}]}, {"name": "test_sequence_invalid_checksum_404_error", "result": 1, "test_description": "Test to check if server returns 404 using some garbage checksum and appropriate headers", "text": "Server is correctly sending 404 on invalid checksum", "parents": ["test_sequence_implement"], "children": [], "warning": false, "edge_cases": []}, {"name": "test_sequence_invalid_encoding_406_error", "result": 1, "test_description": "Test to check if server returns 200 using I test sequence and garbage encoding in Accept header", "text": "Server is correctly sending 406 on invalid encoding", "parents": ["test_sequence_implement"], "children": [], "warning": false, "edge_cases": []}], "total_tests": 33, "total_tests_passed": 28, "total_tests_skipped": 4, "total_tests_failed": 1, "total_warnings": 2, "high_level_summary": {"test_info_implement": {"result": 1, "name": "test_info_implement"}, "test_metadata_implement": {"result": -1, "name": "test_metadata_implement"}, "test_sequence_implement": {"result": 0, "name": "test_sequence_implement"}, "test_sequence_range": {"result": 1, "name": "test_sequence_range"}}}]